// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protobuffers/thread.proto

package thread_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Comment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Comment with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in CommentMultiError, or nil if none found.
func (m *Comment) ValidateAll() error {
	return m.validate(true)
}

func (m *Comment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for AnswerOf

	// no validation rules for Text

	// no validation rules for AuthorUserId

	// no validation rules for AuthorUserName

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return CommentMultiError(errors)
	}

	return nil
}

// CommentMultiError is an error wrapping multiple validation errors returned
// by Comment.ValidateAll() if the designated constraints aren't met.
type CommentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommentMultiError) AllErrors() []error { return m }

// CommentValidationError is the validation error returned by Comment.Validate
// if the designated constraints aren't met.
type CommentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommentValidationError) ErrorName() string { return "CommentValidationError" }

// Error satisfies the builtin error interface
func (e CommentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sComment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommentValidationError{}

// Validate checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Thread) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Thread with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ThreadMultiError, or nil if none found.
func (m *Thread) ValidateAll() error {
	return m.validate(true)
}

func (m *Thread) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for OwnerUserId

	// no validation rules for Archived

	// no validation rules for Description

	// no validation rules for OwnerUserName

	// no validation rules for FirmId

	// no validation rules for FirmName

	if len(errors) > 0 {
		return ThreadMultiError(errors)
	}

	return nil
}

// ThreadMultiError is an error wrapping multiple validation errors returned by
// Thread.ValidateAll() if the designated constraints aren't met.
type ThreadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadMultiError) AllErrors() []error { return m }

// ThreadValidationError is the validation error returned by Thread.Validate if
// the designated constraints aren't met.
type ThreadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadValidationError) ErrorName() string { return "ThreadValidationError" }

// Error satisfies the builtin error interface
func (e ThreadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThread.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadValidationError{}

// Validate checks the field values on ThreadCreationPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ThreadCreationPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ThreadCreationPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ThreadCreationPayloadMultiError, or nil if none found.
func (m *ThreadCreationPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *ThreadCreationPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 5 || l > 150 {
		err := ThreadCreationPayloadValidationError{
			field:  "Title",
			reason: "value length must be between 5 and 150 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ThreadCreationPayload_OwnerUserId_Pattern.MatchString(m.GetOwnerUserId()) {
		err := ThreadCreationPayloadValidationError{
			field:  "OwnerUserId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 1000 {
		err := ThreadCreationPayloadValidationError{
			field:  "Description",
			reason: "value length must be at most 1000 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ThreadCreationPayload_FirmId_Pattern.MatchString(m.GetFirmId()) {
		err := ThreadCreationPayloadValidationError{
			field:  "FirmId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ThreadCreationPayloadMultiError(errors)
	}

	return nil
}

// ThreadCreationPayloadMultiError is an error wrapping multiple validation
// errors returned by ThreadCreationPayload.ValidateAll() if the designated
// constraints aren't met.
type ThreadCreationPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ThreadCreationPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ThreadCreationPayloadMultiError) AllErrors() []error { return m }

// ThreadCreationPayloadValidationError is the validation error returned by
// ThreadCreationPayload.Validate if the designated constraints aren't met.
type ThreadCreationPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ThreadCreationPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ThreadCreationPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ThreadCreationPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ThreadCreationPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ThreadCreationPayloadValidationError) ErrorName() string {
	return "ThreadCreationPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e ThreadCreationPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sThreadCreationPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ThreadCreationPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ThreadCreationPayloadValidationError{}

var _ThreadCreationPayload_OwnerUserId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

var _ThreadCreationPayload_FirmId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on GetThreadRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadRequestMultiError, or nil if none found.
func (m *GetThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetThreadRequest_ThreadId_Pattern.MatchString(m.GetThreadId()) {
		err := GetThreadRequestValidationError{
			field:  "ThreadId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetThreadRequestMultiError(errors)
	}

	return nil
}

// GetThreadRequestMultiError is an error wrapping multiple validation errors
// returned by GetThreadRequest.ValidateAll() if the designated constraints
// aren't met.
type GetThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadRequestMultiError) AllErrors() []error { return m }

// GetThreadRequestValidationError is the validation error returned by
// GetThreadRequest.Validate if the designated constraints aren't met.
type GetThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadRequestValidationError) ErrorName() string { return "GetThreadRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadRequestValidationError{}

var _GetThreadRequest_ThreadId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on GetThreadResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadResponseMultiError, or nil if none found.
func (m *GetThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadResponseValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadResponseValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThreadResponseMultiError(errors)
	}

	return nil
}

// GetThreadResponseMultiError is an error wrapping multiple validation errors
// returned by GetThreadResponse.ValidateAll() if the designated constraints
// aren't met.
type GetThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadResponseMultiError) AllErrors() []error { return m }

// GetThreadResponseValidationError is the validation error returned by
// GetThreadResponse.Validate if the designated constraints aren't met.
type GetThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadResponseValidationError) ErrorName() string {
	return "GetThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadResponseValidationError{}

// Validate checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadRequestMultiError, or nil if none found.
func (m *CreateThreadRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThread()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateThreadRequestValidationError{
					field:  "Thread",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThread()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateThreadRequestValidationError{
				field:  "Thread",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateThreadRequestMultiError(errors)
	}

	return nil
}

// CreateThreadRequestMultiError is an error wrapping multiple validation
// errors returned by CreateThreadRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateThreadRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadRequestMultiError) AllErrors() []error { return m }

// CreateThreadRequestValidationError is the validation error returned by
// CreateThreadRequest.Validate if the designated constraints aren't met.
type CreateThreadRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadRequestValidationError) ErrorName() string {
	return "CreateThreadRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadRequestValidationError{}

// Validate checks the field values on CreateThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateThreadResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateThreadResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateThreadResponseMultiError, or nil if none found.
func (m *CreateThreadResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateThreadResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ThreadId

	if len(errors) > 0 {
		return CreateThreadResponseMultiError(errors)
	}

	return nil
}

// CreateThreadResponseMultiError is an error wrapping multiple validation
// errors returned by CreateThreadResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateThreadResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateThreadResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateThreadResponseMultiError) AllErrors() []error { return m }

// CreateThreadResponseValidationError is the validation error returned by
// CreateThreadResponse.Validate if the designated constraints aren't met.
type CreateThreadResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateThreadResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateThreadResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateThreadResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateThreadResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateThreadResponseValidationError) ErrorName() string {
	return "CreateThreadResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateThreadResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateThreadResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateThreadResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateThreadResponseValidationError{}

// Validate checks the field values on GetThreadCommentsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetThreadCommentsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetThreadCommentsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetThreadCommentsResponseMultiError, or nil if none found.
func (m *GetThreadCommentsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetThreadCommentsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetThreadCommentsResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetThreadCommentsResponseValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetThreadCommentsResponseValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetThreadCommentsResponseMultiError(errors)
	}

	return nil
}

// GetThreadCommentsResponseMultiError is an error wrapping multiple validation
// errors returned by GetThreadCommentsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetThreadCommentsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetThreadCommentsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetThreadCommentsResponseMultiError) AllErrors() []error { return m }

// GetThreadCommentsResponseValidationError is the validation error returned by
// GetThreadCommentsResponse.Validate if the designated constraints aren't met.
type GetThreadCommentsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetThreadCommentsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetThreadCommentsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetThreadCommentsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetThreadCommentsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetThreadCommentsResponseValidationError) ErrorName() string {
	return "GetThreadCommentsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetThreadCommentsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetThreadCommentsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetThreadCommentsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetThreadCommentsResponseValidationError{}

// Validate checks the field values on CreateCommentPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentPayload) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentPayload with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentPayloadMultiError, or nil if none found.
func (m *CreateCommentPayload) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentPayload) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetText()); l < 1 || l > 200 {
		err := CreateCommentPayloadValidationError{
			field:  "Text",
			reason: "value length must be between 1 and 200 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateCommentPayload_AuthorUserId_Pattern.MatchString(m.GetAuthorUserId()) {
		err := CreateCommentPayloadValidationError{
			field:  "AuthorUserId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_CreateCommentPayload_ThreadId_Pattern.MatchString(m.GetThreadId()) {
		err := CreateCommentPayloadValidationError{
			field:  "ThreadId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateCommentPayloadMultiError(errors)
	}

	return nil
}

// CreateCommentPayloadMultiError is an error wrapping multiple validation
// errors returned by CreateCommentPayload.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentPayloadMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentPayloadMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentPayloadMultiError) AllErrors() []error { return m }

// CreateCommentPayloadValidationError is the validation error returned by
// CreateCommentPayload.Validate if the designated constraints aren't met.
type CreateCommentPayloadValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentPayloadValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentPayloadValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentPayloadValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentPayloadValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentPayloadValidationError) ErrorName() string {
	return "CreateCommentPayloadValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentPayloadValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentPayload.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentPayloadValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentPayloadValidationError{}

var _CreateCommentPayload_AuthorUserId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

var _CreateCommentPayload_ThreadId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentRequestMultiError, or nil if none found.
func (m *CreateCommentRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetComment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateCommentRequestValidationError{
					field:  "Comment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetComment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateCommentRequestValidationError{
				field:  "Comment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateCommentRequestMultiError(errors)
	}

	return nil
}

// CreateCommentRequestMultiError is an error wrapping multiple validation
// errors returned by CreateCommentRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentRequestMultiError) AllErrors() []error { return m }

// CreateCommentRequestValidationError is the validation error returned by
// CreateCommentRequest.Validate if the designated constraints aren't met.
type CreateCommentRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentRequestValidationError) ErrorName() string {
	return "CreateCommentRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentRequestValidationError{}

// Validate checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateCommentResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateCommentResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateCommentResponseMultiError, or nil if none found.
func (m *CreateCommentResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateCommentResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CommentId

	if len(errors) > 0 {
		return CreateCommentResponseMultiError(errors)
	}

	return nil
}

// CreateCommentResponseMultiError is an error wrapping multiple validation
// errors returned by CreateCommentResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateCommentResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateCommentResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateCommentResponseMultiError) AllErrors() []error { return m }

// CreateCommentResponseValidationError is the validation error returned by
// CreateCommentResponse.Validate if the designated constraints aren't met.
type CreateCommentResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateCommentResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateCommentResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateCommentResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateCommentResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateCommentResponseValidationError) ErrorName() string {
	return "CreateCommentResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateCommentResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateCommentResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateCommentResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateCommentResponseValidationError{}
