// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package thread_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ThreadServiceClient is the client API for ThreadService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThreadServiceClient interface {
	GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadResponse, error)
	CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error)
	CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error)
	GetThreadComments(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (ThreadService_GetThreadCommentsClient, error)
	GetThreadByFirm(ctx context.Context, in *GetThreadByFirmRequest, opts ...grpc.CallOption) (ThreadService_GetThreadByFirmClient, error)
}

type threadServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThreadServiceClient(cc grpc.ClientConnInterface) ThreadServiceClient {
	return &threadServiceClient{cc}
}

func (c *threadServiceClient) GetThread(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (*GetThreadResponse, error) {
	out := new(GetThreadResponse)
	err := c.cc.Invoke(ctx, "/thread.ThreadService/GetThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) CreateThread(ctx context.Context, in *CreateThreadRequest, opts ...grpc.CallOption) (*CreateThreadResponse, error) {
	out := new(CreateThreadResponse)
	err := c.cc.Invoke(ctx, "/thread.ThreadService/CreateThread", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) CreateComment(ctx context.Context, in *CreateCommentRequest, opts ...grpc.CallOption) (*CreateCommentResponse, error) {
	out := new(CreateCommentResponse)
	err := c.cc.Invoke(ctx, "/thread.ThreadService/CreateComment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *threadServiceClient) GetThreadComments(ctx context.Context, in *GetThreadRequest, opts ...grpc.CallOption) (ThreadService_GetThreadCommentsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ThreadService_ServiceDesc.Streams[0], "/thread.ThreadService/GetThreadComments", opts...)
	if err != nil {
		return nil, err
	}
	x := &threadServiceGetThreadCommentsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ThreadService_GetThreadCommentsClient interface {
	Recv() (*GetThreadCommentsResponse, error)
	grpc.ClientStream
}

type threadServiceGetThreadCommentsClient struct {
	grpc.ClientStream
}

func (x *threadServiceGetThreadCommentsClient) Recv() (*GetThreadCommentsResponse, error) {
	m := new(GetThreadCommentsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *threadServiceClient) GetThreadByFirm(ctx context.Context, in *GetThreadByFirmRequest, opts ...grpc.CallOption) (ThreadService_GetThreadByFirmClient, error) {
	stream, err := c.cc.NewStream(ctx, &ThreadService_ServiceDesc.Streams[1], "/thread.ThreadService/GetThreadByFirm", opts...)
	if err != nil {
		return nil, err
	}
	x := &threadServiceGetThreadByFirmClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ThreadService_GetThreadByFirmClient interface {
	Recv() (*GetThreadByFirmResponse, error)
	grpc.ClientStream
}

type threadServiceGetThreadByFirmClient struct {
	grpc.ClientStream
}

func (x *threadServiceGetThreadByFirmClient) Recv() (*GetThreadByFirmResponse, error) {
	m := new(GetThreadByFirmResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ThreadServiceServer is the server API for ThreadService service.
// All implementations must embed UnimplementedThreadServiceServer
// for forward compatibility
type ThreadServiceServer interface {
	GetThread(context.Context, *GetThreadRequest) (*GetThreadResponse, error)
	CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error)
	CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error)
	GetThreadComments(*GetThreadRequest, ThreadService_GetThreadCommentsServer) error
	GetThreadByFirm(*GetThreadByFirmRequest, ThreadService_GetThreadByFirmServer) error
	mustEmbedUnimplementedThreadServiceServer()
}

// UnimplementedThreadServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThreadServiceServer struct {
}

func (UnimplementedThreadServiceServer) GetThread(context.Context, *GetThreadRequest) (*GetThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetThread not implemented")
}
func (UnimplementedThreadServiceServer) CreateThread(context.Context, *CreateThreadRequest) (*CreateThreadResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateThread not implemented")
}
func (UnimplementedThreadServiceServer) CreateComment(context.Context, *CreateCommentRequest) (*CreateCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateComment not implemented")
}
func (UnimplementedThreadServiceServer) GetThreadComments(*GetThreadRequest, ThreadService_GetThreadCommentsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetThreadComments not implemented")
}
func (UnimplementedThreadServiceServer) GetThreadByFirm(*GetThreadByFirmRequest, ThreadService_GetThreadByFirmServer) error {
	return status.Errorf(codes.Unimplemented, "method GetThreadByFirm not implemented")
}
func (UnimplementedThreadServiceServer) mustEmbedUnimplementedThreadServiceServer() {}

// UnsafeThreadServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThreadServiceServer will
// result in compilation errors.
type UnsafeThreadServiceServer interface {
	mustEmbedUnimplementedThreadServiceServer()
}

func RegisterThreadServiceServer(s grpc.ServiceRegistrar, srv ThreadServiceServer) {
	s.RegisterService(&ThreadService_ServiceDesc, srv)
}

func _ThreadService_GetThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).GetThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.ThreadService/GetThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).GetThread(ctx, req.(*GetThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_CreateThread_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateThreadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).CreateThread(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.ThreadService/CreateThread",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).CreateThread(ctx, req.(*CreateThreadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_CreateComment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThreadServiceServer).CreateComment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/thread.ThreadService/CreateComment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThreadServiceServer).CreateComment(ctx, req.(*CreateCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThreadService_GetThreadComments_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetThreadRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThreadServiceServer).GetThreadComments(m, &threadServiceGetThreadCommentsServer{stream})
}

type ThreadService_GetThreadCommentsServer interface {
	Send(*GetThreadCommentsResponse) error
	grpc.ServerStream
}

type threadServiceGetThreadCommentsServer struct {
	grpc.ServerStream
}

func (x *threadServiceGetThreadCommentsServer) Send(m *GetThreadCommentsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ThreadService_GetThreadByFirm_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetThreadByFirmRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThreadServiceServer).GetThreadByFirm(m, &threadServiceGetThreadByFirmServer{stream})
}

type ThreadService_GetThreadByFirmServer interface {
	Send(*GetThreadByFirmResponse) error
	grpc.ServerStream
}

type threadServiceGetThreadByFirmServer struct {
	grpc.ServerStream
}

func (x *threadServiceGetThreadByFirmServer) Send(m *GetThreadByFirmResponse) error {
	return x.ServerStream.SendMsg(m)
}

// ThreadService_ServiceDesc is the grpc.ServiceDesc for ThreadService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ThreadService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "thread.ThreadService",
	HandlerType: (*ThreadServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetThread",
			Handler:    _ThreadService_GetThread_Handler,
		},
		{
			MethodName: "CreateThread",
			Handler:    _ThreadService_CreateThread_Handler,
		},
		{
			MethodName: "CreateComment",
			Handler:    _ThreadService_CreateComment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetThreadComments",
			Handler:       _ThreadService_GetThreadComments_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GetThreadByFirm",
			Handler:       _ThreadService_GetThreadByFirm_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuffers/thread.proto",
}
