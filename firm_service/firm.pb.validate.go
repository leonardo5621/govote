// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: protobuffers/firm.proto

package firm_service

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Firm with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Firm) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Firm with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in FirmMultiError, or nil if none found.
func (m *Firm) ValidateAll() error {
	return m.validate(true)
}

func (m *Firm) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if l := utf8.RuneCountInString(m.GetName()); l < 1 || l > 100 {
		err := FirmValidationError{
			field:  "Name",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_Firm_OwnerUserId_Pattern.MatchString(m.GetOwnerUserId()) {
		err := FirmValidationError{
			field:  "OwnerUserId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetOwnerUserName()); l < 1 || l > 100 {
		err := FirmValidationError{
			field:  "OwnerUserName",
			reason: "value length must be between 1 and 100 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Enabled

	if len(errors) > 0 {
		return FirmMultiError(errors)
	}

	return nil
}

// FirmMultiError is an error wrapping multiple validation errors returned by
// Firm.ValidateAll() if the designated constraints aren't met.
type FirmMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FirmMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FirmMultiError) AllErrors() []error { return m }

// FirmValidationError is the validation error returned by Firm.Validate if the
// designated constraints aren't met.
type FirmValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FirmValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FirmValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FirmValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FirmValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FirmValidationError) ErrorName() string { return "FirmValidationError" }

// Error satisfies the builtin error interface
func (e FirmValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFirm.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FirmValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FirmValidationError{}

var _Firm_OwnerUserId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on GetFirmRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFirmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFirmRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFirmRequestMultiError,
// or nil if none found.
func (m *GetFirmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFirmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if !_GetFirmRequest_FirmId_Pattern.MatchString(m.GetFirmId()) {
		err := GetFirmRequestValidationError{
			field:  "FirmId",
			reason: "value does not match regex pattern \"^[A-Za-z0-9]*$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetFirmRequestMultiError(errors)
	}

	return nil
}

// GetFirmRequestMultiError is an error wrapping multiple validation errors
// returned by GetFirmRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFirmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFirmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFirmRequestMultiError) AllErrors() []error { return m }

// GetFirmRequestValidationError is the validation error returned by
// GetFirmRequest.Validate if the designated constraints aren't met.
type GetFirmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFirmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFirmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFirmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFirmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFirmRequestValidationError) ErrorName() string { return "GetFirmRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFirmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFirmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFirmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFirmRequestValidationError{}

var _GetFirmRequest_FirmId_Pattern = regexp.MustCompile("^[A-Za-z0-9]*$")

// Validate checks the field values on GetFirmResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFirmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFirmResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFirmResponseMultiError, or nil if none found.
func (m *GetFirmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFirmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFirm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFirmResponseValidationError{
					field:  "Firm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFirmResponseValidationError{
					field:  "Firm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFirmResponseValidationError{
				field:  "Firm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFirmResponseMultiError(errors)
	}

	return nil
}

// GetFirmResponseMultiError is an error wrapping multiple validation errors
// returned by GetFirmResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFirmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFirmResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFirmResponseMultiError) AllErrors() []error { return m }

// GetFirmResponseValidationError is the validation error returned by
// GetFirmResponse.Validate if the designated constraints aren't met.
type GetFirmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFirmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFirmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFirmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFirmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFirmResponseValidationError) ErrorName() string { return "GetFirmResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFirmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFirmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFirmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFirmResponseValidationError{}

// Validate checks the field values on CreateFirmRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateFirmRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFirmRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFirmRequestMultiError, or nil if none found.
func (m *CreateFirmRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFirmRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetFirm()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateFirmRequestValidationError{
					field:  "Firm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateFirmRequestValidationError{
					field:  "Firm",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFirm()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateFirmRequestValidationError{
				field:  "Firm",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateFirmRequestMultiError(errors)
	}

	return nil
}

// CreateFirmRequestMultiError is an error wrapping multiple validation errors
// returned by CreateFirmRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateFirmRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFirmRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFirmRequestMultiError) AllErrors() []error { return m }

// CreateFirmRequestValidationError is the validation error returned by
// CreateFirmRequest.Validate if the designated constraints aren't met.
type CreateFirmRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFirmRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFirmRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFirmRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFirmRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFirmRequestValidationError) ErrorName() string {
	return "CreateFirmRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFirmRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFirmRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFirmRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFirmRequestValidationError{}

// Validate checks the field values on CreateFirmResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateFirmResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateFirmResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateFirmResponseMultiError, or nil if none found.
func (m *CreateFirmResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateFirmResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FirmId

	if len(errors) > 0 {
		return CreateFirmResponseMultiError(errors)
	}

	return nil
}

// CreateFirmResponseMultiError is an error wrapping multiple validation errors
// returned by CreateFirmResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateFirmResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateFirmResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateFirmResponseMultiError) AllErrors() []error { return m }

// CreateFirmResponseValidationError is the validation error returned by
// CreateFirmResponse.Validate if the designated constraints aren't met.
type CreateFirmResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateFirmResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateFirmResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateFirmResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateFirmResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateFirmResponseValidationError) ErrorName() string {
	return "CreateFirmResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateFirmResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateFirmResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateFirmResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateFirmResponseValidationError{}
