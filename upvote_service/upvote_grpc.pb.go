// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package upvote_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpvoteServiceClient is the client API for UpvoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpvoteServiceClient interface {
	VoteThread(ctx context.Context, opts ...grpc.CallOption) (UpvoteService_VoteThreadClient, error)
	VoteComment(ctx context.Context, opts ...grpc.CallOption) (UpvoteService_VoteCommentClient, error)
}

type upvoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpvoteServiceClient(cc grpc.ClientConnInterface) UpvoteServiceClient {
	return &upvoteServiceClient{cc}
}

func (c *upvoteServiceClient) VoteThread(ctx context.Context, opts ...grpc.CallOption) (UpvoteService_VoteThreadClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpvoteService_ServiceDesc.Streams[0], "/upvote.UpvoteService/VoteThread", opts...)
	if err != nil {
		return nil, err
	}
	x := &upvoteServiceVoteThreadClient{stream}
	return x, nil
}

type UpvoteService_VoteThreadClient interface {
	Send(*VoteThreadRequest) error
	Recv() (*VoteThreadResponse, error)
	grpc.ClientStream
}

type upvoteServiceVoteThreadClient struct {
	grpc.ClientStream
}

func (x *upvoteServiceVoteThreadClient) Send(m *VoteThreadRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upvoteServiceVoteThreadClient) Recv() (*VoteThreadResponse, error) {
	m := new(VoteThreadResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *upvoteServiceClient) VoteComment(ctx context.Context, opts ...grpc.CallOption) (UpvoteService_VoteCommentClient, error) {
	stream, err := c.cc.NewStream(ctx, &UpvoteService_ServiceDesc.Streams[1], "/upvote.UpvoteService/VoteComment", opts...)
	if err != nil {
		return nil, err
	}
	x := &upvoteServiceVoteCommentClient{stream}
	return x, nil
}

type UpvoteService_VoteCommentClient interface {
	Send(*VoteCommentRequest) error
	Recv() (*VoteCommentResponse, error)
	grpc.ClientStream
}

type upvoteServiceVoteCommentClient struct {
	grpc.ClientStream
}

func (x *upvoteServiceVoteCommentClient) Send(m *VoteCommentRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *upvoteServiceVoteCommentClient) Recv() (*VoteCommentResponse, error) {
	m := new(VoteCommentResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpvoteServiceServer is the server API for UpvoteService service.
// All implementations must embed UnimplementedUpvoteServiceServer
// for forward compatibility
type UpvoteServiceServer interface {
	VoteThread(UpvoteService_VoteThreadServer) error
	VoteComment(UpvoteService_VoteCommentServer) error
	mustEmbedUnimplementedUpvoteServiceServer()
}

// UnimplementedUpvoteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpvoteServiceServer struct {
}

func (UnimplementedUpvoteServiceServer) VoteThread(UpvoteService_VoteThreadServer) error {
	return status.Errorf(codes.Unimplemented, "method VoteThread not implemented")
}
func (UnimplementedUpvoteServiceServer) VoteComment(UpvoteService_VoteCommentServer) error {
	return status.Errorf(codes.Unimplemented, "method VoteComment not implemented")
}
func (UnimplementedUpvoteServiceServer) mustEmbedUnimplementedUpvoteServiceServer() {}

// UnsafeUpvoteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpvoteServiceServer will
// result in compilation errors.
type UnsafeUpvoteServiceServer interface {
	mustEmbedUnimplementedUpvoteServiceServer()
}

func RegisterUpvoteServiceServer(s grpc.ServiceRegistrar, srv UpvoteServiceServer) {
	s.RegisterService(&UpvoteService_ServiceDesc, srv)
}

func _UpvoteService_VoteThread_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpvoteServiceServer).VoteThread(&upvoteServiceVoteThreadServer{stream})
}

type UpvoteService_VoteThreadServer interface {
	Send(*VoteThreadResponse) error
	Recv() (*VoteThreadRequest, error)
	grpc.ServerStream
}

type upvoteServiceVoteThreadServer struct {
	grpc.ServerStream
}

func (x *upvoteServiceVoteThreadServer) Send(m *VoteThreadResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upvoteServiceVoteThreadServer) Recv() (*VoteThreadRequest, error) {
	m := new(VoteThreadRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _UpvoteService_VoteComment_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UpvoteServiceServer).VoteComment(&upvoteServiceVoteCommentServer{stream})
}

type UpvoteService_VoteCommentServer interface {
	Send(*VoteCommentResponse) error
	Recv() (*VoteCommentRequest, error)
	grpc.ServerStream
}

type upvoteServiceVoteCommentServer struct {
	grpc.ServerStream
}

func (x *upvoteServiceVoteCommentServer) Send(m *VoteCommentResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *upvoteServiceVoteCommentServer) Recv() (*VoteCommentRequest, error) {
	m := new(VoteCommentRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UpvoteService_ServiceDesc is the grpc.ServiceDesc for UpvoteService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpvoteService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upvote.UpvoteService",
	HandlerType: (*UpvoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "VoteThread",
			Handler:       _UpvoteService_VoteThread_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "VoteComment",
			Handler:       _UpvoteService_VoteComment_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuffers/upvote.proto",
}
